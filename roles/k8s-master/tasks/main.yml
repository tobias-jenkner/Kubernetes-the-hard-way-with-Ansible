- name: Add workers IPs to /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "^.*{{ item }}$"
    line: "{{ hostvars[item]['ansible_host'] }}    {{ item }}"
  with_items: "{{ groups['k8s-workers'] }}"

- name: Copy binaries
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/
    owner: root
    group: k8s
    mode: 0554
  loop:
    - '{{ BIN_DIR }}/kube-apiserver'
    - '{{ BIN_DIR }}/kube-controller-manager'
    - '{{ BIN_DIR }}/kube-scheduler'
    - '{{ BIN_DIR }}/kubectl'

- name: Create config directory
  file:
    path: /var/lib/kubernetes
    state: directory
    owner: root
    group: k8s
    mode: 0755

- name: Copy certificates and keys
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubernetes/
    owner: root
    group: k8s
    mode: 0644
  loop:
    - '{{ PKI_DIR }}/ca.pem'
    - '{{ PKI_DIR }}/ca-key.pem'
    - '{{ PKI_DIR }}/k8s-master.pem'
    - '{{ PKI_DIR }}/k8s-master-key.pem'
    - '{{ PKI_DIR }}/encryption-config.yml'

- name: Copy systemd unit file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: k8s
    mode: 0644
  with_items: 
    - { src: "lib/systemd/system/kube-apiserver.service.j2"          , dest: "/lib/systemd/system/kube-apiserver.service" }
    - { src: "lib/systemd/system/kube-controller-manager.service.j2" , dest: "/lib/systemd/system/kube-controller-manager.service" }
    - { src: "lib/systemd/system/kube-scheduler.service.j2"          , dest: "/lib/systemd/system/kube-scheduler.service" }
  notify:
    - restart k8s-master
  tags:
    - config

- meta: flush_handlers

  #- name: Copy rbac config file
  #  template:
  #    src: rbac-conf/rbac.yml
  #    dest: "~/"

    #- name: Configure RBAC for kubelet authorization
    #  run_once: yes
    #  #local_action: "shell kubectl apply -f roles/k8s-master/templates/rbac-conf/rbac.yml --kubeconfig {{ CONF_DIR }}/admin.kubeconfig"
    #  shell: |
    #    kubectl apply -f ~/rbac.yml --kubeconfig ~/admin.kubeconfig
    #  #become_user: "{{ lookup('env','USER') }}"
    #  register: rbac_conf
    #  until: rbac_conf.stderr == ''
    #  retries: 3
    #  delay: 10
 
